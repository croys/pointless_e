;.code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Public interface

; Vector table
_ase_init:      jmp _init_e_calc
_ase_nxt:       jmp _nxt_dvsr
_ase_mul_init:  jmp _as_mul_init
_ase_mul:       jmp _as_mul

;.data

; FIXME: Make N, NUMPAG dynamic arguments here

_ase_mul_res:   byt 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;.data

A1:             byt 0
PCOUNT:         byt 0

; NL              = .LOBYTE(N)
; NH              = .HIBYTE(N)
NL              = N & $FF
NH              = N / 256

;.code

_init_e_calc:
; zero memory
                lda #NUMPAG
                sta PCOUNT
                ldx #LASTPAG
                stx .zloop+2
.clrpag:        lda #0
                ldy #0
.zloop:         sta E,y
                dey
                bne .zloop
                dex
                stx .zloop+2
                dec PCOUNT
                bne .clrpag

; Initialise offsets
                lda #NH
                sta NHREF1+1
                sta NHREF2+1
                lda #NL
                sta NLREF1+1
                sta NLREF2+1
                rts

_nxt_dvsr:
                lda #NUMPAG
                sta PCOUNT
                lda #1
                sta A1
                lda #E/256
                sta EREF1+2
                sta EREF2+2
                lda #0
                sta EREF1+1
                sta EREF2+1
NXTBYTE:        ldy #8
EREF1:          asl E
NXTBIT:         rol A1
                rol A
NHREF1:         cmp #NH
                bcc EREF2
                bne REPLACE
                ldx A1
NLREF1:         cpx #NL
                bcc EREF2
REPLACE:        tax
                lda A1
NLREF2:         sbc #NL
                sta A1
                txa
NHREF2:         sbc #NH
EREF2:          rol E
                dey
                bne NXTBIT
                inc EREF1+1
                inc EREF2+1
                bne NXTBYTE
                inc EREF1+2
                inc EREF2+2
                dec PCOUNT
                bne NXTBYTE
                lda NLREF1+1
                bne NXTDVR2
                dec NHREF1+1
                dec NHREF2+1
NXTDVR2:        dec NLREF1+1
                dec NLREF2+1
                lda NLREF1+1
                lsr A
                ora NHREF1+1
                bne _nxt_dvsr
                rts


; Multiply by 100 for display

; Initialisation

LASTPAG         = (E / 256) + NUMPAG - 1

_as_mul_init:
                lda #0
                tax
                tay
PRODGEN:        sta PRODLO,Y
                pha
                txa
                sta PRODHI,Y
                pla
                clc
                adc #100
                bcc nxtprod
                inx
nxtprod:        iny
                bne PRODGEN
                rts

; multiplication main routine

_as_mul:
                lda #NUMPAG
                sta PCOUNT
                lda #LASTPAG
                sta MULT1+2
                sta MULT2+2
                ldy #0
                ldx #0
                clc
MULBYT:         lda PRODHI,X
                dey
MULT1:          ldx E,Y
                adc PRODLO,X
MULT2:          sta E,Y
                tya
                bne MULBYT
                dec MULT1+2
                dec MULT2+2
                dec PCOUNT
                bne MULBYT
                adc PRODHI,X
                sta _ase_mul_res
                rts

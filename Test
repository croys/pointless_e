#!/usr/bin/env bash
set -eu -o pipefail

####################################################################
#   Project Setup

export T8_PROJDIR=$(cd "$(dirname "$0")" && pwd -P)
echo "T8_PROJDIR=${T8_PROJDIR}"
t8dir=t8dev
[[ -r $T8_PROJDIR/$t8dir/t8setup.bash ]] \
    || git submodule update --init "$T8_PROJDIR/$t8dir"
. "$T8_PROJDIR"/$t8dir/t8setup.bash

t8dev="$T8_PROJDIR/$t8dir/bin/t8dev"
echo "t8dev=${t8dev}"

$t8dev buildtoolset asl

####################################################################
#   XXX It would be nice to be able here to build the unit test versions of
#   source under 8bitdev/. However, there are two path issues that need to
#   be resolved to do this:
#   1. The tests (.pt files) underneath 8bitdev/src/ assume that 8bitdev/
#      is in the Python import search path so they can import common test
#      code. This is true when building with 8bitdev/ as the project
#      directory, but not with a different project directory. This could be
#      hacked in with `export PYTHONPATH=$T8_PROJDIR/8bitdev/`,
#      though that may not be the best solution.
#   2. The tests specify the object files to be built and loaded using
#      paths that implicitly give the source file relative to 8bitdev/,
#      e.g. `src/mc68/simple.p` However, here they are relative to
#      $T8_PROJDIR, e.g. `$T8_PROJDIR/8bitdev/src/mc68/simple.a65`. It's
#      not clear if it's worth trying to change the system to handle things
#      being built from different locations due to different settings of
#      $T8_PROJDIR.
#   For the moment, at least, we just assume that everything under 8bitdev/
#   is already tested and working and have our programs here include this
#   presumably-tested-and-working source.

#   XXX There are some cases where we want to run programs that load object
#   files built from source files under 8bitdev. One example is
#   8bitdev/b8tool/bin/tmc6800, which wants to load
#   $BUILD/obj/src/tmc68/bioscode.p along with whatever object file the
#   user wants to run. We can't even build 8bitdev/src/tmc68/bioscode.a65
#   because it includes `src/tmc68/bios.a68`, which is actually under
#   $T8_PROJDIR/8bitdev/, not $T8_PROJDIR/, and so is not in the ASL
#   include search path.
#
#   One part of the solution may be to have a way of specifying additional
#   include search paths for ASL (and other tools), probably with a -I
#   option to b8tool. However, that doesn't deal with the issue that
#   bin/tmc6800 is looking for the BIOS object file in obj/src/…, not
#   obj/8bitdev/src/…. We could hack around this by also adding an option
#   to bin/tmc6800 to tell it what BIOS to load (or just allow
#   specification of multiple objects to load and skip the standard BIOS
#   when given multiple object files), but it's not clear that this is the
#   best or most general solution to the problem. Possibly a clever way of
#   resolving the test issue above could also deal with this.
#
#$b8tool asl 8bitdev/src/tmc68/bioscode.a65
#
#   XXX Actually, the real issue exposed above is that bin/tmc6800 is part
#   of b8tool (it runs b8tool's Python 6800 simulator) but it's got a
#   dependency on code that's part of 8bitdev (src/tmc68/bioscode). Adding
#   assembly source to b8tool is awkward and doesn't actually seem entirely
#   correct. Possibly the BIOS to load (if any) should be specified in a
#   per-project configuration file?
#
####################################################################

$t8dev aslauto src/
manual_build=(
    #   Top-level programs whose build is not triggered by automated tests.
    src/tmc68/bioscode.a68
    exe/jr200/hello.a68
    exe/tmc68/hello.a68
    exe/jr200/e_calc.a68
)
$t8dev asl "${manual_build[@]}"

$t8dev pytest -- "$@"
